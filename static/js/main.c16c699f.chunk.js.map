{"version":3,"sources":["cloudy.png","index.js"],"names":["module","exports","Square","props","className","onClick","value","console","log","cloud","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","status","winner","renderSquare","React","Component","Game","src","alt","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,sICa3C,SAASC,EAAOC,GAKZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,OAfnBC,QAAQC,IAAIC,K,IAoBNC,E,kDAGD,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CACTC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJE,E,wDAQPC,GACR,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAChCC,EAAgBP,IAAYA,EAAQI,KAGvCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKG,SAAS,CACVR,QAASA,EAIVG,SAAUE,KAAKN,MAAMI,a,mCAKhBC,GAAI,IAAD,OACd,OAAQ,kBAACd,EAAD,CACNI,MAAOW,KAAKN,MAAMC,QAAQI,GAG1BX,QAAS,kBAAM,EAAKgB,YAAYL,Q,+BAKhC,IACIM,EADEC,EAASJ,EAAgBF,KAAKN,MAAMC,SAS5C,OANMU,EADDC,EACU,WAAaA,EAAS,SAEtB,gBAAkBN,KAAKN,MAAMI,QAAU,KAAO,MAK3D,6BACE,yBAAKX,UAAU,UAAUkB,GACzB,yBAAKlB,UAAU,aACZa,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAErB,yBAAKpB,UAAU,aACZa,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAErB,yBAAKpB,UAAU,aACZa,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,S,GA9DXC,IAAMC,WAqElBC,E,uKAEF,OACI,6BACI,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,SAASwB,IAAKnB,IAAOoB,IAAI,UACxC,yBAAKzB,UAAU,SAASwB,IAAKnB,IAAOoB,IAAI,UACxC,yBAAKzB,UAAU,SAASwB,IAAKnB,IAAOoB,IAAI,WAE1C,yBAAKzB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACM,EAAD,OAEF,yBAAKN,UAAU,aAEf,8BACI,oC,GAhBHqB,IAAMC,WAoCzB,SAASP,EAAgBP,GAWvB,IAVA,IAAMkB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAd,EAAI,EAAGA,EAAIc,EAAMC,OAAQf,IAAK,CAAC,IAAD,cACnBc,EAAMd,GADa,GAC9BgB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAItB,EAAQoB,IAAMpB,EAAQoB,KAAOpB,EAAQqB,IAAMrB,EAAQoB,KAAOpB,EAAQsB,GACpE,OAAOtB,EAAQoB,GAGnB,OAAO,KA3BTG,IAASC,OACP,kBAACT,EAAD,MACAU,SAASC,eAAe,U","file":"static/js/main.c16c699f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy.89b44ac6.png\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport cloud from './cloudy.png';\n\nconsole.log(cloud);\n\n/* ******************************* VERSION ONE *******************************\nIn this version, there is no history bank, so you won't be able to see the history of the game.\nI have just designed it differently to make it simple and aesthetically pleasing\nOctober/11/2020 Alejandra Perez\n*/\n\nfunction Square(props) {\n    /*In this new square, we got rid of the class Square because we are now using function components.\n    It is a simpler way to write components that only contain a render method and don't have state.\n    \n    It takes props as input and returns what should be rendered.*/\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n  \nclass Board extends React.Component {\n      /*constructor that sets the board's initial state to contain an array of 9 nulls\n      corresponding to the 9 squares*/\n     constructor(props) { \n         super(props);\n         this.state = {\n             squares: Array(9).fill(null),\n             xIsNext: true, //setting up props for 'o'\n         };\n     }\n\n     handleClick(i) {\n         const squares = this.state.squares.slice();\n         if(calculateWinner(squares) || squares[i]) {\n             return; //will stop x's and o's b/c a winner is declared\n         }\n         squares[i] = this.state.xIsNext ? 'x' : 'o';\n         this.setState({\n             squares: squares,\n            /* This boolean will flip to determine which player goes next and\n            the games state will be saved\n            If is xIsNext is not true then it will place a 'o' */\n            xIsNext: !this.state.xIsNext \n        });\n     }\n\n\n    renderSquare(i) {\n      return (<Square \n        value={this.state.squares[i]}\n        /* Pass down a function from the board to the square > have a square call\n        that function when a square is clicked*/\n        onClick={() => this.handleClick(i)}/>); //value is a prop being passed into square\n    }\n  \n    render() {\n        // This allows you to see the next player displayed on top of board -- and whos next\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if(winner) {\n            status = 'Player  ' + winner + ' wins!';\n        } else {\n            status = 'Go, player: ' + (this.state.xIsNext ? 'x!' : 'o!');\n        }\n      \n  \n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n}\n  \n  class Game extends React.Component {\n    render() {\n      return (\n          <div>\n              <div className=\"cloud-div\">\n                <img className=\"cloud1\" src={cloud} alt=\"cloud\" />\n                <img className=\"cloud2\" src={cloud} alt=\"cloud\" />\n                <img className=\"cloud3\" src={cloud} alt=\"cloud\" />\n              </div>\n              <div className=\"game\">\n                  <div className=\"game-board\">\n                      <Board />\n                    </div>\n                    <div className=\"game-info\">\n              \n                    <div>{/*status*/}</div>\n                        <ol>{/* TODO */}</ol>\n                    </div>\n                </div>\n          </div>    \n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n\n  );\n\n\n  /* Helper Function\n  allows for */\n  \n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }"],"sourceRoot":""}